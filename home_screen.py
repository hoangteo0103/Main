from kivymd.app import MDApp
from kivymd.uix.screen import MDScreen
from kivy.lang import Builder
from kivy.metrics import dp
from kivymd.uix.datatables import MDDataTable

Builder.load_string('''
<HomeScreen>:
    BoxLayout:
        orientation: "vertical"
        MDLabel:
            text: "Rar Cracker"
            font_style: "H3"
            halign: "center"
            size_hint_y: None
            height: self.texture_size[1]

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True
            BoxLayout:
                id: anchor
                orientation: "vertical"
                size_hint_y: None
                height: self.minimum_height
                spacing: 15
            
                MDLabel:
                    index: 1
                    text: "1. Student List"
                    font_style: "H5"
                    pos_hint: {"right": 1.02}
                    size_hint_y: None
                    height: self.texture_size[1]

                MDLabel:
                    index: 3
                    text: "2. Background"
                    font_style: "H5"
                    size_hint_y: None
                    height: self.texture_size[1]
                    pos_hint: {"right": 1.02}


                MDLabel:
                    id: info
                    index: 4
                    text: ""
                    font_style: "Body1"
                    size_hint_y: None
                    height: self.texture_size[1]
                    padding: 30

                MDLabel:
                    index: 5
                    text: "3. Our Method"
                    font_style: "H5"
                    size_hint_y: None
                    height: self.texture_size[1]
                    pos_hint: {"right": 1.02}


                MDLabel:
                    id: method
                    padding: 30
                    index: 6
                    text: ""
                    font_style: "Body1"
                    size_hint_y: None
                    height: self.texture_size[1]
                
                MDLabel:
                    index: 7
                    id: brute_force_title
                    text: "Brute Force Attack"
                    pos_hint: {"right": 1.04}
                    font_style: "H6"
                    size_hint_y: None
                    height: self.texture_size[1]
                
                MDLabel:
                    index: 8
                    id: brute_force_info
                    text: ""
                    font_style: "Body1"
                    size_hint_y: None
                    height: self.texture_size[1]
                    padding: 30

                MDLabel:
                    index: 9
                    text: "Local Dictionary Attack"
                    font_style: "H6"
                    size_hint_y: None
                    pos_hint: {"right": 1.04}
                    height: self.texture_size[1]


                MDLabel:
                    id: local_dict_info
                    index: 10
                    text: ""
                    font_style: "Body1"
                    size_hint_y: None
                    height: self.texture_size[1]
                    padding: 30
''')

class HomeScreen(MDScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        data_tables = MDDataTable(
            size_hint=(0.8, None),
            height=dp(300),
            pos_hint={"center_x": 0.45},
            column_data=[
                ("STT", dp(30)),
                ("Họ Và Tên", dp(50)),
                ("Mã số", dp(50)),
            ],
            row_data=[
                ("1", "Nguyễn Quang Đức", "011-B1D11-T07"),
                ("2", "Lê Trọng Hiếu", "012-B1D11-T07"),
                ("3", "Nguyễn Công Hiển", "013-B1D11-T07"),
                ("4", "Nông Thị Huyên", "015-B1D11-T07"),
            ],
        )
        self.ids.anchor.add_widget(data_tables, 8)
        self.ids.info.text = (
            "Since the development of the RAR 5.0 format, WinRAR detects wrong "
            "passwords before starting extraction and does not extract garbage. "
            "RAR 5.0 stores a special password hash generated by a one-way hash function. "
            "When a password is entered, RAR compares its hash to the stored hash; in case "
            "of no match, it rejects the wrong password early. This one-way hash function "
            "is intentionally slow and based on PBKDF2. This noticeably decreases the chances "
            "of a successful brute force attack."
        )

        self.ids.method.text = (
            "Our application offers two powerful methods to crack RAR file passwords: Brute Force and Local Dictionary. "
            "Each method is integrated with a user-friendly interface built using Kivy and KivyMD, providing a seamless experience "
            "for users attempting to recover their files."
            )
        self.ids.brute_force_info.text = (
            "The brute force method systematically generates and tests all possible combinations of characters until the correct "
            "password is found. This approach uses the DefaultProvider class to generate combinations based on a specified character set "
            "and password length range. The implementation involves multi-threading to speed up the process, with users able to customize "
            "the number of threads, the character set, and the range of character lengths directly from the app interface. The user can "
            "select a RAR file, set parameters, and start the brute force attack, with real-time updates on the cracking process.")
        self.ids.local_dict_info.text = (
            "The local dictionary method leverages a pre-existing list of potential passwords stored in a text file. This method is highly "
            "efficient for common passwords and is implemented using the LocalProvider class, which reads passwords line by line from the "
            "dictionary file. Users can easily select the RAR file and the dictionary file through the interface and start the cracking process. "
            "The application supports multi-threading, allowing users to specify the number of threads to be used."
        )
    def on_close(self):
        if self.thread:
            self.thread.join()

class HomeApp(MDApp):
    def build(self):
        return HomeScreen()

if __name__ == "__main__":
    HomeApp().run()
